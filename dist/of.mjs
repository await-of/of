function of(e,r={}){{const{args:e,defaults:t,error:s,retries:o,timeout:i}=new Object(r);r={args:e,defaults:t,error:s,retries:o,timeout:i}}let t;switch(e.constructor.name||Object.prototype.toString.call(e)){case"Promise":t=e,r.retries=0,delete r.args;break;case"AsyncFunction":t=e(...Array.isArray(r.args)?[...r.args]:[]);break;case"Function":t=new Promise((t,s)=>{try{t(e(...Array.isArray(r.args)?[...r.args]:[]))}catch(e){s(e)}});break;case"GeneratorFunction":t=new Promise((t,s)=>{const o=e(...Array.isArray(r.args)?[...r.args]:[]);try{t(o.next().value)}catch(e){s(e)}});break;case"[object Generator]":t=new Promise((r,t)=>{try{r(e.next().value)}catch(e){t(e)}}),delete r.args;break;default:t=new Promise((r,t)=>{Promise.resolve(e).then(r).catch(t)}),delete r.args}if(void 0!==r.timeout){const e=Number.parseInt(r.timeout);Number.isFinite(e)&&e>0?r.timeout=e>Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:e:delete r.timeout}else delete r.timeout;return(r.timeout?Promise.race([Promise.resolve(t),new Promise((e,t)=>{setTimeout(()=>t(new Error(`Timeout: ${r.timeout}ms`)))})]):Promise.resolve(t)).then(e=>[e,void 0]).catch(t=>{if(void 0!==r.retries){const e=Number.parseInt(r.retries);Number.isFinite(e)&&e>0?r.retries=e>Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:e:delete r.retries}else delete r.retries;return r.retries&&(r.attempt=void 0===r.attempt?0:r.attempt+1,r.attempt<r.retries)?of(e,r):(null==t&&(t=new Error("Rejected")),r.error instanceof Error?t=r.error:"string"==typeof r.error&&(t.message=r.error),[r.defaults,t])})}export{of};
//# sourceMappingURL=of.mjs.map
